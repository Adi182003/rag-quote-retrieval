TASK – 1
Problem Statement
Objective:
Develop a machine learning pipeline that classifies customer support tickets by their issue 
type and urgency level, and extracts key entities (e.g., product names, dates, complaint 
keywords). The file (ai_dev_assignment_tickets_complex_1000 ) is provided.
Assignment Tasks
1. Data Preparation
• You are provided with an Excel file (ai_dev_assignment_tickets_complex_1000 ) 
containing anonymized customer support ticket data with the following columns:
o ticket_id
o ticket_text
o issue_type (label)
o urgency_level (label: Low, Medium, High)
o product (ground truth for entity extraction)
• Clean and preprocess the data, including but not limited to:
o Text normalization (lowercase, removing special characters)
o Tokenization, stopword removal, lemmatization
o Handling missing data
2. Feature Engineering
• Create meaningful features using traditional NLP techniques:
o Bag-of-Words, TF-IDF, or similar
o Extract additional features such as ticket length, sentiment score, etc.
• Justify your feature selection in the documentation.
3. Multi-Task Learning
• Build and train two separate models:
1. Issue Type Classifier: Predict the ticket's issue_type (multi-class classification)
2. Urgency Level Classifier: Predict the urgency_level (multi-class classification)
• Use any classical ML models (e.g., Logistic Regression, SVM, Random Forest, etc.).
4. Entity Extraction
• Using traditional NLP, extract key entities from ticket_text:
o Product names (from a provided product list or using regex/rule-based 
methods)
o Dates mentioned in the text
o Complaint keywords (e.g., “broken”, “late”, “error”)
• Return extracted entities as a dictionary.
5. Integration
• Write a function that takes raw ticket_text as input and returns:
o Predicted issue_type
o Predicted urgency_level
o Extracted entities (as a JSON/dictionary)
6. Gradio Interface (Optional)
• Build an interactive Gradio web app where users can:
o Input raw ticket text
o See the predicted issue type, urgency, and extracted entities as output
7. Documentation & Submission (Each of the following points is mandatory)
• Briefly document your code: key design choices, model evaluation (with metrics), 
and limitations (README or notebook markdown).
• A short screen recording demo video explaining the code and the output coming 
from Gradio. You can upload the video on Google Drive (and share access) or any of 
the many sites that are available these days.
• Submit:
o All code (Jupyter notebook or .py scripts)
o Demo Video
o README with instructions to run the code and app
Bonus (Optional)
• Add visualizations of ticket distributions, feature importances, etc.
• Add confusion matrices and classification report. 
• Allow batch processing of multiple tickets via Gradio.
Evaluation Criteria
• Code quality, clarity, and organization
• Soundness of data preprocessing and feature engineering
• Correct use of traditional NLP and ML models
• Robustness and accuracy of predictions (use cross-validation or a test set)
• Usability and look of the Gradio app
• Ability to explain your approach and choices
• Documentation and demo video